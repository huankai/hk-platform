server:
  port: 7100
  servlet:
    context-path: /oauth2
    session:
      timeout: 1h
      cookie:
        http-only: true
############################ spring configuration ##############################
spring:
  servlet:
    multipart:
      enabled: false # 禁用文件上传功能
  autoconfigure:
    exclude:
      # 默认情况下，spring boot web 应用会装配一些功能组件 bean,大多数情况下，可以选择性关闭自动装配的组件bean,以提升性能。
      - org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration
      - org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration
      - org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration
      - org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration
      - org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration
  mvc:
    throw-exception-if-no-handler-found: true
    formcontent:
      filter:
        # 关闭 org.springframework.web.filter.FormContentFilter
        enabled: false
  ######################################################### 国际化配置
  messages:
    encoding: UTF-8
    basename: messages,com/hk/core/i18n/messages,org/springframework/security/messages
    cache-duration: -1ms
  ######################################################### thymeleaf 配置
  thymeleaf:
    enabled: true
    cache: false
    mode: HTML5
    encoding: UTF-8
    prefix: classpath:/templates/
    suffix: .html
    servlet:
      content-type: text/html; charset=utf-8
  ########################################################## jpa 配置
  jpa:
    show-sql: false
    generate-ddl: false
    properties:
      hibernate:
        # 解决懒加载在非事务中的 no-session 的问题 @see https://stackoverflow.com/questions/36583185/spring-data-jpa-could-not-initialize-proxy-no-session-with-methods-marke
        enable_lazy_load_no_trans: true
  ######################################################### datasource 配置
  datasource:
    name: hikari
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/hk_pms?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: root
    password:
    ######################################################### hikari datasource 配置
    hikari:
      maximum-pool-size: 50
      max-lifetime: 600000
      minimum-idle: 10
      connection-timeout: 30000
      read-only: false
      connection-test-query: SELECT 1
  ################################################################### redis
  cache:
    type: redis
  redis:
    host: 127.0.0.1
    password:
    port: 6379
    database: 2
    timeout: 2m
    lettuce:
      pool:
        min-idle: 10
        max-idle: 20
        max-active: 1000
        max-wait: 2m
  cloud:
    nacos:
      discovery:
        # 是否注册到 nacos 中
        register-enabled: false
        # ip:
        # 网络接口名，如果配置了 ip,则使用 ip
        #        network-interface:
        weight: 1
        server-addr: 182.61.40.18:8848
        namespace: eae427cd-ecb0-49fd-b3f1-999a0d68d2fe
  ############################################################################ spring cloud stream 配置
  #    stream:
  #      # 当有多个binder时(如kafka、rabbitmq)，默认的binder
  #      default-binder: kafka
  #      # 应用已部署实例的数量
  ##      instance-count: 3
  #      kafka:
  #        binder:
  #          # Kafka绑定（binder）将连接到的代理（broker）列表
  #          brokers:
  #            - sjq-01:9092
  #            - sjq-02:9092
  #            - sjq-03:9092
  #
  #          # 自动创建 topic，默认值为 true，如果topic不存在，会自动创建，如果设置为false,binder无法启动
  ##          auto-create-topics: true
  ##
  ##          # 如果设置为true，则绑定（binder）将根据需要创建添加新分区。
  ##          # 如果设置为false，则绑定（binder）将依赖于已经配置的主题的分区大小。
  ##          # 如果目标主题的分区数量小于期望值，绑定（binder）将无法启动
  ##          auto-add-partitions: false
  ##
  ##          # 仅在 auto-create-topics 或 auto-add-partitions 为true时有效，
  ##          # 绑定（binder）将在其生产/消费数据的主题（topic）上配置的分区的全局最小数量。
  ##          # 它可以被生产者的partitionCount设置或生产者的instanceCount * concurrency设置的值所替代（其中较大的值）。
  #          min-partition-count: 2
  ##
  ##          #以秒为单位等待分区信息的时间，默认为 60，如果此计时器到期，运行状态将报告down.
  ##          health-timeout: 30
  ##
  ##         # 创建 topic 副本数，默认为 1
  ##         # 副本数对kafka的吞吐率会有一定的影响。
  #          replication-factor: 3
  #          # 设置数据可靠性保证
  #          # 0： 生产者无需等待来自 broker 的确认，不能确定消息是否到达 broker，配置此参数时数据传输效率最高，但数据可靠性是最低的。
  #          # 1： 生产者在ISR 中的 Leader 已成功收到数据并确认，则消息发送成功，如果leader 所在服务器宕机了，则会丢失消息
  #          # 大于1： 生产者在ISR 中的指定数量的follower收到消息才算发送成功。
  #          # all ：生产者需要等待 ISR中所有的follower都确定接收数据后才算发送成功，可靠性最高，但这样也不能保证数据不丢失，如在 ISR 中只有 Leader 时,Leader宕机，则会丢失消息
  #          required-acks: 'all'
  #
  #          configuration:
  #            # 上面配置的 required-acks 为 all， 虽然能最大限度的保证数据的可靠性，但对于集群节点数据过多的情况下，会损失部分性能
  #            # 因为需要在 ISR 中所有的 follower 都确定接收成功才算发送成功，可结合 min.insync.replicas 参数，发挥最大的功效
  #            # 此参数仅在 required-acks = all 时才有效，如果 ISR 中的副本数少于 min.insync.replicas 参数值，会反回异常信息。
  #            # 此参数表示需要 ISR 中有多少个副本数确认后才能表示消息发送成功，而不需要全部确认。但好像在这里配置不生效。
  ##            min.insync.replicas: 5
  #
  #            # 指定压缩类型
  #            # none ，默认值
  #            # gzip
  #            # snappy
  #            # lz4
  #            compression.type: none
  #      bindings:
  ##        input:
  ##          #通道内容类型，默认为 application/json
  ##          #content-type: "application/json"
  ##
  ##          # 消费者组
  ##          #group: ""
  ##
  ##          #
  ##          #destination: ""
  ##
  ##          # 设置binder类型，当classpath下有多个 Binder依赖时，必须指定 使用哪个binder来绑定所有的通道,查看　META-INF/spring.binders　文件中 key
  ##          # 提供的其它binder（如 rabbitmq）也会有这样的文件,自定义binder实现也需要提供这样的文件
  ##          # 可以使用 default-binder为每个通道配置binder
  ##          #binder: "kafka"
  ##          consumer:
  ##            # 流入消费者的并发性
  ##            concurrency: 1
  ##
  ##            # 消费者是否接受来自一个分区的生产者数据
  ##            partitioned: false
  ##
  ##            # 当设置为大于等于0的值的时候，允许自定义此消费者的实例数量
  ##            instance-count: -1
  ##
  ##            # 当设置为大于等于0的值的时候，允许自定义此消费者的实例索引
  ##            instance-index: -1
  ##
  ##            # 如果处理失败，则尝试处理该消息的次数（包括第一次）。 设置为1以禁用重试，默认为 3
  ##            max-attempts: 3
  ##
  ##            #
  ##            back-off-initial-interval: 1000
  ##
  ##            #
  ##            back-offmax-interval: 10000
  ##
  ##            # 回退乘数
  ##            back-off-multiplier: 2.0
  ##
  ##            #
  ##            # header-mode: "none"
  ##
  ##            #
  ##            use-native-decoding: false
  #
  #            #
  ##            multiplex: false
  ##
  ##        # 配置 output 生产者
  #        output:
  #          # 指定消息发送的目的地，消息会发送到这个主题，消费者可订阅此主题消费消息
  #          destination: destination-01
  ##          #默认为 application/json
  ##          #content-type: "application/json"
  ##          group: abc
  #            # 设置binder类型，当classpath下有多个 Binder依赖时，必须指定 使用哪个binder来绑定所有的通道,查看　META-INF/spring.binders　文件中 key
  #            # 提供的其它binder（如 rabbitmq）也会有这样的文件,自定义binder实现也需要提供这样的文件
  #            # 可以使用 default-binder为每个通道配置binder
  #            #binder: "kafka"
  #
  #            #producer:
  #
  #              # partition-key-extractor-name: ""
  #
  #              # 配置 消息生产在哪个 partition 上，需要实现 org.springframework.cloud.stream.binder.PartitionSelectorStrategy 接口，也可以使用表达式
  ##              partition-selector-name: ""
  #
  #              # 数据的目标分区的数量（如果分区已启用）。 如果生产者是分区的，则必须设置为大于1的值。 在Kafka上意味着使用 此值和目标主题分区数量中的较大值。
  #              # partition-count: 2
  #
  #              # 设置为true时，流出消息将直接由客户端库序列化，客户端库必须相应地进行配置（例如，设置适当的Kafka生产者value serializer）。
  #              # 使用此配置时，流出消息编组不是基于绑定的contentType。 当使用本地编码时，消费者有责任使用适当的解码器（例如：Kafka消费者value de-serializer）来反序列化流入消息。
  #              # 而且，当使用本地编码/解码时，headerMode = embeddedHeaders属性将被忽略，并且头部不会嵌入到消息中。
  #              #use-native-encoding: false
  #
  #              # 设置为true时，如果binder支持异步发送结果; 发送失败的消息将被发送到目的地（destination）的错误通道
  #              #error-channel-enabled : false
  ##    bus:
  ###      trace:
  ##        enabled: true
  ##    stream:
  ##      kafka:
  ##        binder:
  ##          brokers: 192.168.64.128:9092,192.168.64.129:9092,192.168.64.130:9092
  ########################################################################### spring boot admin 配置
  boot:
    admin:
      client:
        url: "http://182.61.40.18:8780"
        username: user
        password: user#1350
        instance:
          prefer-ip: false
          service-url: "http://127.0.0.1:${server.port}${server.servlet.context-path}"
########################################################################### management 配置
management:
  endpoints:
    web:
      exposure:
        #启动所有监控端口
        include: "*"
      #endpoint:
      #  health:
      #查看详细的应用健康信息，如数据库的连接、redis的连接等，默认为 never
      # show-details: always
#    bus-env:
#      enabled: true
######################################################### mybatis 配置
mybatis:
  mapper-locations: classpath:mybatis/mappers/*.xml
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.log4j2.Log4j2Impl

######################################################### mybatis pageHelper 配置
pagehelper:
  reasonable: false
  support-methods-arguments: true
  params: count=countSql

######################################################### spring security oauth2 配置
security:
  oauth2:
    authorization:
      token-key-access: "isAuthenticated()"
      check-token-access: "isAuthenticated()"

hk:
  request:
    # 放入request属性 @see com.hk.core.web.interceptors.GlobalPropertyInterceptor
    property:
      #resourceUrlPrefix: http://192.168.64.150/resources
      resourceUrlPrefix: resources
  authentication:
    login:
      # 如果不使用gateWay ,登陆地址为 :
      login-url: /login
      #如果 使用 gateWay,登陆地址需要加上 Gateway的ip与端口
      # login-url: http://127.0.0.1:8771${server.servlet.context-path}/login
      login-processing-url: /login
      logout-url: /logout
      logout-success-url: /
      username-parameter: username
      password-parameter: password
      maximum-sessions: 2
    sms:
      enabled: true
      code-length: 6
      code-expire-in: 180
      code-parameter: phoneCode
      phone-parameter: phone
      post-only: true
      phone-login-uri: /mobile/login

######################################################### 微信配置
wechat:
  mp:
    enabled: false
    #微信网页二维码登陆需要在微信开放平台申请账号并审核，公众平台的app-id无效
    app-id: wx72303d4d8b1f0d00
    secret: 19175e5d7111969a1dcc86048d338f866
    #    token: hk9060   #此token对于微信网页二微码登陆无效
    authentication:
      callback-url: /wechat/callback
      call-host: http://sqn62q.natappfree.cc
      state: 3d6be0a4685d839573b04816624a415e
######################################################### logging 配置
logging:
  config: classpath:log4j2.xml