# CAS Server Context Configuration
server:
  port: 8888
  context-path: /cas
  ssl:
    enabled: false
    key-store: file:/etc/cas/thekeystore
    key-password: changeit
    key-store-password: changeit

  max-http-header-size: 2097152
  use-forward-headers: true
  connection-timeout: 20000
  error:
    include-stacktrace: ALWAYS

  compression:
    enabled: true
    mime-types: "application/javascript,application/json,application/xml,text/html,text/xml,text/plain"
  tomcat: 
    max-http-post-size: 2097152
    basedir: build/tomcat
    accesslog:
      enabled: true
      pattern: "%t %a '%r' %s (%D ms)"
      suffix: .log
    min-spare-threads: 10
    max-threads: 200
    port-header: X-Forwarded-Port
    protocol-header: X-Forwarded-Proto
    protocol-header-https-value: https
    remote-ip-header: X-FORWARDED-FOR
    uri-encoding: UTF-8
#    context-parameters:
#      isLog4jAutoInitializationDisabled: true
##
# CAS Web Application Session Configuration
#
  session: 
    timeout: 300
    cookie:
      http-only: true
    tracking-modes: COOKIE
spring:
  http:
    encoding: 
      enabled: true
      charset: UTF-8
      force: true
##
# CAS AspectJ Configuration
#
  aop:
    auto: true
    proxy-target-class: true
##
# CAS Thymeleaf View Configuration
#
  thymeleaf: 
    encoding: UTF-8
    cache: true
    mode: HTML
    template-resolver-order: 100
##
# CAS Cloud Bus Configuration
#
  cloud:
#    bus:
#      enabled: false

# Indicates that systemPropertiesOverride can be used.
# Set to false to prevent users from changing the default accidentally. Default true.
    config:
      allow-override: true

# External properties should override system properties.
      override-system-properties: false

# When allowOverride is true, external properties should take lowest priority, and not override any
# existing property sources (including local config files).
      override-none: false

# spring.cloud.bus.refresh.enabled=true
# spring.cloud.bus.env.enabled=true
# spring.cloud.bus.destination=CasCloudBus
# spring.cloud.bus.ack.enabled=true

endpoints:
  enabled: false
  sensitive: true
  restart:
    enabled: false
  shutdown:
    enabled: false

# Control the security of the management/actuator endpoints
# The 'enabled' flag below here controls the rendering of details for the health endpoint amongst other things.
management:
  security:
    enabled: true
    roles: ACTUATOR,ADMIN
    sessions: if_required
  context-path: /status
  add-application-context-header: false

# Define a CAS-specific "WARN" status code and its order
  health:
    status:
      order: WARN, DOWN, OUT_OF_SERVICE, UNKNOWN, UP

# Control the security of the management/actuator endpoints
# With basic authentication, assuming Spring Security and/or relevant modules are on the classpath.
security:
  basic:
    authorize-mode: role
    path: ${server.context-path}/status/**
# security.basic.enabled=true
# security.user.name=casuser
# security.user.password=




##
# CAS Log4j Configuration
#
# logging.config=file:/etc/cas/log4j2.xml
# server.context-parameters.isLog4jAutoInitializationDisabled=true

##
# CAS Authentication Credentials
#
cas:
  authn: 
    accept:
      users: casuser::Mellon
