server:
  servlet:
    context-path: /
    session:
      cookie:
        name: fs_jsession
        http-only: true
spring:
  servlet:
    multipart:
      max-request-size: 100MB
      max-file-size: 100MB
  autoconfigure:
    exclude:
    # 默认情况下，spring boot web 应用会装配一些功能组件 bean,大多数情况下，可以选择性关闭自动装配的组件bean,以提升性能。
      - org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration
      - org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration
      - org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration
      - org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration
      - org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration
  mvc:
    throw-exception-if-no-handler-found: true
    formcontent:
      putfilter:
      # 关闭 org.springframework.web.filter.HttpPutFormContentFilter
        enabled: false
  resources:
    add-mappings: true
  messages:
    basename: org/springframework/security/messages,com/hk/core/i18n/messages,messages
    encoding: utf-8
    cache-duration: -1ms
########################################################## jpa 配置
  jpa:
    show-sql: true
    generate-ddl: false
    properties:
      hibernate:
      #        hbm2ddl:
      #         auto: upload
      # 解决懒加载在非事务中的 no-session 的问题 @see https://stackoverflow.com/questions/36583185/spring-data-jpa-could-not-initialize-proxy-no-session-with-methods-marke
        enable_lazy_load_no_trans: true
        dialect: org.hibernate.dialect.MySQL57InnoDBDialect

########################################################## jpa 配置
  datasource:
    name: druid
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.64.150:3306/hk_fs?characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: root
    password: root
    druid:
      initial-size: 1
      max-active: 20
      min-idle: 1
      max-wait: 6000
      time-between-eviction-runs-millis: 60000
      test-on-borrow: true
      test-on-return: false
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      filters: stat,wall,log4j2
      filter:
        stat:
          slow-sql-millis: 5000
      connection-properties: druid.stat.mergeSql=true
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        # 禁用HTML页面上的“Reset All”功能
        reset-enable: false
        allow: 127.0.0.1
        login-username: druidAdmin
        login-password: druidAdmin@%*
      web-stat-filter:
        enabled: true
        url-pattern: /**
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"

################################################################### redis
#  redis:
#    password: 1234567
#    host: 127.0.0.1
#    port: 6379
#    database: 2
#    timeout: 3000ms
#    lettuce:
#      pool:
#        max-active: 8
#        min-idle: 0
#        max-idle: 8
#        max-wait: -1ms
#  cache:
#    type: redis

################################################################### eureka
eureka:
  instance:
    hostname: 127.0.0.1
    prefer-ip-address: false
  client:
    service-url:
      defaultZone: http://root:root123@127.0.0.1:8761/eureka

################################################################### fdfs 配置
fdfs:
  connect-timeout: 1000
  so-timeout: 10000
  thumb-image: # 缩略图生成参数
    height: 150
    width: 150
  tracker-list:
    - 192.168.64.128:22122
  pool:
    max-total: 100 # 从池中借出的对象的最大数目
    max-wait-millis: 1000 # 获取连接时的最大等待毫秒数100
################################################################### security oauth2
# 特别注意：
#  1.这里配置的url如果是 127.0.0.1，登陆成功后访问sso 认证服务器时也只能以这个ip地址访问，不能用 localhost，
#    除非你配置的是localhost,否则，在访问认证服务器的时候，sso会让你重新登陆，具体原因未查明，但经过测试结果是这样的
#    这句话的意思就是：
#     如下面的 access-token-url  和 user-authorization-uri 配置的ip 是127.0.0.1,
#     在登陆成功后，也只能是 http://127.0.0.1:8080来访问认证服务器，如果用 http://localhost:8080来访问认证服务器， 认证服务器会让你登陆。
#  2. 以本项目中的 pms 与 emi 举例，如果 pms 中配置的是 127.0.0.1 ,而 emi 中配置的是 localhost,
#     如果 pms通过认证， 在访问emi时，也需要再登陆一次，即不会实现单点,
#     通过浏览器查看cookie可知，使用 127.0.0.1  和  localhost 访问的时候， 浏览器带上的cookie信息是不一样的
security:
  oauth2:
    client:
      client-id: f2f77124b224479fa928f49786568251
      client-secret: f2f77124b224479fa928f49786568251
      access-token-uri: http://127.0.0.1:8086/oauth/token
      user-authorization-uri: http://127.0.0.1:8086/oauth/authorize
#      use-current-uri: false
#      pre-established-redirect-uri: http://127.0.0.1:8771/pms/login
    resource:
      jwt:
        key-uri: http://127.0.0.1:8086/oauth/token_key
    sso:
      login-path: /login

hk:
  fs:
    file-url: http://192.168.64.128:${server.port}
  authentication:
    browser:
      logout-url: /logout
      logout-success-url: http://127.0.0.1:8086/logout?redirect_url=http://127.0.0.1:${server.port}${server.servlet.context-path}
    #  gate-way-host: http://127.0.0.1:8771/fs

#      permit-all-matchers:
#        - method: GET
#          uris:
#            - /api/**
#          permission: admin
#        - method: GET
#          uris:
#            - /aaaa/**
#          permission: admin
#   default-failure-url: http://127.0.0.1:8771/fs/error  #使用了gateway这里写上gateway访问的路径，如果是前后端分离项目，可以不需要这样写

######################################################### swagger 文档生成配置
  swagger:
    title: "XXX公司_文件管理系统_接口文档"
    description: "用于管理文件系统..."
    version: "2.1.0.RELEASE"
    base-package: "com.hk.fs.controller"
######################################################### logging 配置
logging:
  level:
    root: error
    com.hk: info
    org.springframework.security: debug
    org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: debug
    org.springframework.jdbc.core.JdbcTemplate: debug
    org.springframework.jdbc.core.StatementCreatorUtils: debug
    org.hibernate.SQL: debug
    org.hibernate.type.descriptor.sql.BasicBinder: debug





